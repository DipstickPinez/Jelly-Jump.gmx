<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprt_p_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creation Variables and Code
grav = 0.2; //how fast vvel decreases due to grav
hsp = 0; //replaced with vel
vsp = 0; //replaced with vvel
movespeed = 4; //how fast you move; set variable
directlast = 0; //which direction you are facing last 1 = right
direct = 0 //current direction
ded = 0; //r u ded or not
alarm_set(0,-1);

//acceleration and jumps
startvel = 1 //inital vel
vel = 0 //current horizontal speed
accelspd = 0.5 //how fast you speed up
accel = 0 //how fast you will speed up(this is a vector)
frict = 1 //uh how fast you slow down when you stop inputting directin
vvel = 0 //vertical code
accelstart = 0 //have you started moving yet
wallhit = 0 //did you hit the wall
wallhitspd = 2 //movespeed you can use when you hit the wall

//Jumps module
jump = 0; // r u jumpin or not
jumpspeed = 7; //how fast set jump jumps
jumploss = 0.75 //how jump lowers vel
startjumpspd = 5 //basic jump speed
jumpvel = 0 //the velocity to use for jump height
jumps = 0; //current number of jumps used
jumpsmax = 2; //maximum number of jumps
move_lock = false; //is your direction locked from wall jumps
grounded = false; //are you grounded
wallpush = 5 //pushoff speed of wall
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///walljumping alarm
move_lock = false
alarm_set(1,-1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ded sprite alarm
room_restart(); 
alarm_set(0,-1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement
//Get the player's input
key_right = keyboard_check(vk_right); //checks are you pressing right
key_left = -keyboard_check(vk_left); //chesks are you pressing left
key_jump = keyboard_check_pressed(vk_up); //checks DID YOU PRESS up
//React to inputs
if (vvel &lt; 10) vvel += grav;
if move_lock = false
{
move = key_left + key_right;
accel = move * accelspd;
if sign(move) != 0
{
    if accelstart == 0
    {
        vel = startvel * move;
        accelstart = 1;
    }
    if sign(vel) &lt;= 4
    {
        if accelstart == 1
        {
            vel += accel;
        }
    }
}
if (key_right + key_left) = 1
    {
    directlast = 1;
    }
if (key_right + key_left) = -1
    {
    directlast = -1;
    }
if sign(vel) != 0
{
    if move == 0 or move == -sign(vel)
    {
    vel = 0
    }   
}
direct = move
if sign(move) = 0
{
accelstart = 0
}
}
if keyboard_check(vk_escape)
    {
    game_restart();
    }
if keyboard_check(ord("R"))
{
room_restart();
}
//Jump variables and double jumps
if (place_meeting(x,y+1,obj_dirt))
{
    grounded = true
    jumps = jumpsmax
    wallcling = 0
}
else
{
grounded = false
}
if (key_jump) &amp;&amp; (jumps = 2)
{
    jumps -= 1
    vvel = -jumpspeed;
}
else if (key_jump) &amp;&amp; (jumps = 1)
{
    jumps -= 1;
    vvel = -jumpspeed * 0.75
}
if (!place_meeting(x,y+1,obj_dirt)) &amp;&amp; (jumps == jumpsmax)
{
    jumps --;
}
//Wall jump
if (key_jump) and place_meeting(x+1,y,obj_dirt) and grounded = false
{
    vvel = -jumpspeed * 0.5;
    move = -1;
    vel = move * wallpush
    move_lock = true;
    alarm_set(1,room_speed * 0.4);
}
if (key_jump) and place_meeting(x-1,y,obj_dirt) and grounded = false
{
    vvel = -jumpspeed * 0.5;
    move = 1;
    vel = move * wallpush
    move_lock = true;
    alarm_set(1,room_speed * 0.4);
}
//Horizontal Collision
if (place_meeting(x+vel,y,obj_dirt))
{
    while(!place_meeting(x+sign(vel),y,obj_dirt))
    {
        x += sign(vel);
    }
    vel = 0
}
//if (place_meeting(x,y+1,obj_dirt))
//{
//    vvel = ((startjumpspd + (jumpvel - 1) * 0.5) * -key_jump);
//}
//Vertical Collision
if (place_meeting(x,y+vvel,obj_dirt))
{
    while(!place_meeting(x,y+sign(vvel),obj_dirt))
    {
        y += sign(vvel);
    }
    vvel = 0
}
//Diagonal collision
if(place_meeting(x+vel,y+vvel,obj_dirt))
{
    while(!place_meeting(x+sign(vel),y+sign(vvel),obj_dirt))
    {
        x+= sign(vel);
        y+= sign(vvel);
    }
    vel = 0;
    vvel = 0;
}
//Border Collisions
if (place_meeting(x+vel,y,obj_border))
{
    while(!place_meeting(x+sign(vel),y,obj_border))
    {
        x += sign(vel);
    }
    vel = 0
}
if (place_meeting(x,y+vvel,obj_border))
{
    while(!place_meeting(x,y+sign(vvel),obj_border))
    {
        y += sign(vvel);
    }
    vvel = 0
}
if(place_meeting(x+vel,y+vvel,obj_border))
{
    while(!place_meeting(x+sign(vel),y+sign(vvel),obj_border))
    {
        x+= sign(vel);
        y+= sign(vvel);
    }
    vel = 0;
    vvel = 0;
}
// When you get rekt
if (place_meeting(x,y+vvel,obj_lava))
{
    if ded == 0
    {
    ded = 1
    }
    while(!place_meeting(x,y+sign(vvel),obj_lava))
    {
        y += sign(vvel);
    }
    vvel = 0;
}

if ded == 1
    {
    alarm_set(0,room_speed);
    ded = 2;
    }
if ded != 0
{
vel = 0
}
//Idle, Jump, Fall Sprites
if (move!=0) image_xscale = move;
if (place_meeting(x,y+1,obj_dirt))
{
    if (move!=0) sprite_index = sprt_p_walk; else sprite_index = sprt_p_idle
}
else 
{
    if (vvel &lt; 0) sprite_index = sprt_p_jump; else sprite_index = sprt_p_fall;
}
if (place_meeting(x+1,y,obj_dirt)) &amp;&amp; (!place_meeting(x,y+1,obj_dirt))
{
    sprite_index = sprt_p_wallcling;
    image_xscale = 1;
}
if (place_meeting(x-1,y,obj_dirt)) &amp;&amp; (!place_meeting(x,y+1,obj_dirt))
{
sprite_index = sprt_p_wallcling
image_xscale = -1
}
if (place_meeting(x,y+1,obj_lava))
{
sprite_index = sprt_ded;
image_xscale = 1;
}
//Final move calcs
x += vel;
y += vvel;
//if (place_meeting(x,y+1, obj_lava))
//{
//room transfer
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
